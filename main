import argparse
import subprocess
import sys
from pathlib import Path

# Scripts dispon√≠veis e ordem de execu√ß√£o
steps = [
    "0_DOWNLOAD_DADOS.PY",
    "1_CONSOLIDA√á√ÉO_DADOS.PY",
    "2_AN√ÅLISE_DADOS_CONSOLIDADOS.PY",
    "3_FILTRO_AER√ìDROMOS_VARIAVEIS_AERONAVES.PY",
    "3.1_AN√ÅLISE_GR√ÅFICA_VOOS_POR_ANO_FILTRO.PY",
    "4_AN√ÅLISE_E_INSER√á√ÉO_DADOS_E_VARI√ÅVEIS.PY",
    "4.1_FILTRO_TEMPOS_DIFERENTES.PY",
    "4.3_AN√ÅLISE_VOOS.PY",
    "5_AN√ÅLISE_REGRESS√ÉO_LINEAR_MULTIPLA.PY",
    "00_DEPURA√á√ÉO.PY"
]

def run_script(script_name):
    print(f"\nüü¢ Executando: {script_name}")
    result = subprocess.run([sys.executable, script_name])
    if result.returncode != 0:
        print(f"üî¥ Erro ao executar {script_name}. C√≥digo de retorno: {result.returncode}")
        sys.exit(result.returncode)
    print(f"‚úÖ Finalizado: {script_name}")

def main():
    parser = argparse.ArgumentParser(description="Executa etapas da an√°lise ANAC em sequ√™ncia.")
    parser.add_argument(
        "--from-step",
        help="Nome do script a partir do qual come√ßar (ex: 2_AN√ÅLISE_DADOS_CONSOLIDADOS.PY)",
        default=None
    )
    args = parser.parse_args()

    # Define o ponto de partida
    start_index = 0
    if args.from_step:
        try:
            start_index = steps.index(args.from_step)
        except ValueError:
            print(f"‚ùå Etapa '{args.from_step}' n√£o encontrada. Use uma das etapas abaixo:")
            for s in steps:
                print(" -", s)
            sys.exit(1)

    # Executa os scripts a partir do ponto definido
    for step in steps[start_index:]:
        run_script(step)

if __name__ == "__main__":
    main()
